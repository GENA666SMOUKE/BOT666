import asyncio
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from aiohttp.client_exceptions import ClientConnectionError
from aiogram.types import FSInputFile
from io import BytesIO
from typing import List, Dict
from loguru import logger
from telethon import TelegramClient
from telethon.tl.types import PeerChannel, PeerUser, PeerChat, MessageMediaPhoto, MessageMediaDocument, DocumentAttributeVideo, DocumentAttributeAudio, DocumentAttributeSticker
from telethon.errors.rpcerrorlist import FloodWaitError
from telethon.tl.functions.channels import JoinChannelRequest
from aiogram import Bot
from database.models import TargetChat

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()
active_parsers: Dict[int, Dict[str, asyncio.Task]] = {}
client_cache: Dict[int, TelegramClient] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
def get_channel_name(target_chat: str) -> str:
    return target_chat.replace("https://t.me/", "").split("/")[0]

async def start_real_time_parsing(account, target_chat_id: str, bot: Bot, forward_chat_id: str, keywords=None, filter_enabled=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫—ç—à–µ
    if account.id not in client_cache:
        session_name = f"sessions/{account.phone_number}"
        client = TelegramClient(
            session=session_name,
            api_id=account.api_id,
            api_hash=account.api_hash
        )
        try:
            await client.start()
            if not await client.is_user_authorized():
                logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account.phone_number} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                raise ValueError("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            client_cache[account.id] = client
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account.id}: {e}")
            raise
    else:
        client = client_cache[account.id]

    try:
        entity = await client.get_entity(target_chat_id)
        if isinstance(entity, PeerChannel):
            chat_id = int(f"-100{entity.id}")
        elif isinstance(entity, PeerChat):
            chat_id = -entity.id
        elif isinstance(entity, PeerUser):
            chat_id = entity.id
        else:
            chat_id = int(entity.id) if hasattr(entity, 'id') and entity.id else None
        if chat_id is None:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è {target_chat_id}")
        logger.info(f"–ß–∞—Ç {target_chat_id} (ID: {chat_id})")
    except ValueError as e:
        logger.info(f"–ß–∞—Ç {target_chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è...")
        try:
            await client(JoinChannelRequest(target_chat_id))
            entity = await client.get_entity(target_chat_id)
            if isinstance(entity, PeerChannel):
                chat_id = int(f"-100{entity.id}")
            elif isinstance(entity, PeerChat):
                chat_id = -entity.id
            elif isinstance(entity, PeerUser):
                chat_id = entity.id
            else:
                chat_id = int(entity.id) if hasattr(entity, 'id') and entity.id else None
            if chat_id is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {target_chat_id}")
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {target_chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É {target_chat_id}: {e}")
            raise

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç TargetChat –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–¥–∞—á—É
    target_chat = TargetChat(id=0, chat_id=chat_id, title=target_chat_id)

    logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {target_chat_id} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    task = asyncio.create_task(real_time_parsing_task(client, account.id, target_chat, bot, forward_chat_id, keywords, filter_enabled))
    if account.id not in active_parsers:
        active_parsers[account.id] = {}
    active_parsers[account.id][target_chat_id] = task
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account.id} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ")

async def real_time_parsing_task(client: TelegramClient, account_id: int, target_chat: TargetChat, bot: Bot, forward_chat_id: int, keywords: List[str], filter_enabled: bool):
    logger.info(f"–ß–∞—Ç {target_chat.title} (ID: {target_chat.chat_id})")
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {target_chat.title} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    # –ö—ç—à–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client_cache[account_id] = client

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ —É–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Ä—É—á–Ω—É—é
    async def ensure_connected():
        if not client.is_connected():
            logger.info(f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
            await client.connect()
        if not await client.is_user_authorized():
            logger.error(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return False
        return True

    if not await ensure_connected():
        return

    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        async for message in client.iter_messages(target_chat.chat_id, limit=10):
            if message.id in processed_messages:
                continue
            processed_messages.add(message.id)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {forward_chat_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            message_text = message.text or ""
            if filter_enabled and keywords:
                if not any(keyword.lower() in message_text.lower() for keyword in keywords):
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
                    continue

            # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            formatted_text = message_text

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = f"üëç –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ [{target_chat.title}](https://t.me/{target_chat.title.replace(' ', '_')})"

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å –¥–ª—è MarkdownV2
            special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in special_chars:
                signature = signature.replace(char, f'\\{char}')

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
            formatted_text = f"{formatted_text}\n\n{signature}" if formatted_text else signature

            # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_photo_with_retry():
                media_file.seek(0)
                return await bot.send_photo(
                    chat_id=forward_chat_id,
                    photo=FSInputFile(media_file, filename=f"photo_{message.id}.jpg"),
                    caption=formatted_text,
                    parse_mode="MarkdownV2",
                    disable_notification=False
                )

            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_video_with_retry():
                media_file.seek(0)
                return await bot.send_video(
                    chat_id=forward_chat_id,
                    video=FSInputFile(media_file, filename=f"video_{message.id}.mp4"),
                    caption=formatted_text,
                    parse_mode="MarkdownV2",
                    disable_notification=False
                )

            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_audio_with_retry():
                media_file.seek(0)
                return await bot.send_audio(
                    chat_id=forward_chat_id,
                    audio=FSInputFile(media_file, filename=f"audio_{message.id}.mp3"),
                    caption=formatted_text,
                    parse_mode="MarkdownV2",
                    disable_notification=False
                )

            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_document_with_retry():
                media_file.seek(0)
                return await bot.send_document(
                    chat_id=forward_chat_id,
                    document=FSInputFile(media_file, filename=f"document_{message.id}"),
                    caption=formatted_text,
                    parse_mode="MarkdownV2",
                    disable_notification=False
                )

            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_sticker_with_retry():
                media_file.seek(0)
                return await bot.send_sticker(
                    chat_id=forward_chat_id,
                    sticker=FSInputFile(media_file, filename=f"sticker_{message.id}.webp")
                )

            @retry(
                stop=stop_after_attempt(10),
                wait=wait_exponential(multiplier=1, min=2, max=30),
                retry=retry_if_exception_type(ClientConnectionError),
                before_sleep=lambda retry_state: logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}, –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number}")
            )
            async def send_message_with_retry():
                return await bot.send_message(
                    chat_id=forward_chat_id,
                    text=formatted_text,
                    parse_mode="MarkdownV2",
                    disable_notification=False,
                    disable_web_page_preview=False
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            try:
                if message.media:
                    media_file = await client.download_media(message.media, file=BytesIO())
                    media_file.seek(0)
                    if not await ensure_connected():
                        continue
                    if isinstance(message.media, MessageMediaPhoto):
                        await send_photo_with_retry()
                        logger.info(f"–§–æ—Ç–æ {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º")
                    elif isinstance(message.media, MessageMediaDocument):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã
                        attributes = message.media.document.attributes if message.media.document else []
                        is_sticker = any(isinstance(attr, DocumentAttributeSticker) for attr in attributes)
                        is_video = any(isinstance(attr, DocumentAttributeVideo) for attr in attributes)
                        is_audio = any(isinstance(attr, DocumentAttributeAudio) for attr in attributes)

                        if is_sticker:
                            await send_sticker_with_retry()
                            logger.info(f"–°—Ç–∏–∫–µ—Ä {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        elif is_video:
                            await send_video_with_retry()
                            logger.info(f"–í–∏–¥–µ–æ {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º")
                        elif is_audio:
                            await send_audio_with_retry()
                            logger.info(f"–ê—É–¥–∏–æ {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º")
                        else:
                            await send_document_with_retry()
                            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º")
                else:
                    if not await ensure_connected():
                        continue
                    await send_message_with_retry()
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {forward_chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {str(e)}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        await asyncio.sleep(5)

    logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

async def stop_parsing(account_id: int, target_chat_id: str):
    logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –∏ —á–∞—Ç–∞ {target_chat_id}")
    if account_id in active_parsers and target_chat_id in active_parsers[account_id]:
        task = active_parsers[account_id].pop(target_chat_id)
        task.cancel()
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —á–∞—Ç–∞ {target_chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if not active_parsers[account_id]:
            del active_parsers[account_id]
            if account_id in client_cache:
                client = client_cache.pop(account_id)
                await client.disconnect()
                logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –æ—Ç–∫–ª—é—á—ë–Ω")
    else:
        logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –∏ —á–∞—Ç–∞ {target_chat_id}")