import logging
import os
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_db
from parser.client import create_client, authorize_client, complete_authorization
from parser.parser import start_real_time_parsing, stop_parsing, active_parsers
from sqlalchemy import select, text
from database.models import Account, Proxy, TargetChat, Settings, KeywordFilter, KeywordList
from loguru import logger

router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class AddAccountForm(StatesGroup):
    phone_number = State()
    api_id = State()
    api_hash = State()
    code = State()
    password = State()

class AddProxyForm(StatesGroup):
    proxy_data = State()

class AddTargetChatForm(StatesGroup):
    chat_id = State()
    title = State()

class SetForwardChatForm(StatesGroup):
    chat_id = State()

class AddKeywordListForm(StatesGroup):
    name = State()
    keywords = State()

class EditKeywordListForm(StatesGroup):
    list_id = State()
    name = State()
    keywords = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏
def get_account_keyboard(accounts, action: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for account in accounts:
        if isinstance(account, dict) and "id" in account:
            text = f"ID: {account['id']}"
            if action.startswith("delete"):
                text = f"ID: {account['id']} [–£–¥–∞–ª–∏—Ç—å]"
        else:
            text = f"ID: {account.id}"
            if action.startswith("delete"):
                text = f"ID: {account.id} [–£–¥–∞–ª–∏—Ç—å]"
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"{action}:{account.id}"
        )
        keyboard.inline_keyboard.append([button])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
def get_target_chat_keyboard(chats, action: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for chat in chats:
        if isinstance(chat, dict) and "id" in chat:
            text = f"{chat.get('title', chat.get('chat_id'))} (ID: {chat['id']})"
            if action.startswith("delete"):
                text = f"{chat.get('title', chat.get('chat_id'))} (ID: {chat['id']}) [–£–¥–∞–ª–∏—Ç—å]"
        else:
            text = f"{chat.title or chat.chat_id} (ID: {chat.id})"
            if action.startswith("delete"):
                text = f"{chat.title or chat.chat_id} (ID: {chat.id}) [–£–¥–∞–ª–∏—Ç—å]"
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"{action}:{chat.id}"
        )
        keyboard.inline_keyboard.append([button])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
def get_active_parsers_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for account_id in active_parsers.keys():
        for target_chat_id in active_parsers[account_id].keys():
            text = f"–ê–∫–∫–∞—É–Ω—Ç ID: {account_id}, –ß–∞—Ç: {target_chat_id}"
            button = InlineKeyboardButton(
                text=text,
                callback_data=f"stop_parsing:{account_id}:{target_chat_id}"
            )
            keyboard.inline_keyboard.append([button])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
async def get_keyword_list_keyboard(lists, action: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for keyword_list in lists:
        # –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enabled —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å
        async with get_db() as db:
            result = await db.execute(select(KeywordList.enabled).where(KeywordList.id == keyword_list.id))
            enabled = result.scalar() or False
        status_icon = "üü¢" if enabled else "üî¥"
        text = f"{status_icon} {keyword_list.name} (ID: {keyword_list.id})"
        if action.startswith("delete"):
            text = f"{status_icon} {keyword_list.name} (ID: {keyword_list.id}) [–£–¥–∞–ª–∏—Ç—å]"
        elif action.startswith("toggle"):
            text = f"{status_icon} {keyword_list.name} (ID: {keyword_list.id}) [{'–í–∫–ª' if enabled else '–í—ã–∫–ª'}]"
        elif action.startswith("edit"):
            text = f"{status_icon} {keyword_list.name} (ID: {keyword_list.id}) [–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å]"
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"{action}:{keyword_list.id}"
        )
        keyboard.inline_keyboard.append([button])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_keyword_menu")])
    return keyboard

# –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
def get_accounts_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="list_accounts")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="check_account")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
def get_proxy_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data="add_proxy")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data="list_proxies")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data="delete_proxy")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data="bind_proxy")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
def get_chat_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç", callback_data="add_target_chat")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤", callback_data="list_target_chats")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç", callback_data="delete_target_chat")],
        [InlineKeyboardButton(text="üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏", callback_data="set_forward_chat")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
def get_keyword_list_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="add_keyword_list")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤", callback_data="list_keyword_lists")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="edit_keyword_list")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="delete_keyword_list")],
        [InlineKeyboardButton(text="üîÑ –í–∫–ª/–í—ã–∫–ª —Å–ø–∏—Å–æ–∫", callback_data="toggle_keyword_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_parsing")]
    ])
    return keyboard

# –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
def get_parsing_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
    active_status = []
    if active_parsers:
        for account_id in active_parsers.keys():
            for target_chat_id in active_parsers[account_id].keys():
                active_status.append(f"–ê–∫–∫–∞—É–Ω—Ç ID: {account_id}, –ß–∞—Ç: {target_chat_id}")
        if active_status:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∏: {', '.join(active_status)}", callback_data="noop")])
        else:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤", callback_data="noop")])
    else:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤", callback_data="noop")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_parsing")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="stop_parsing")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ —Å–ª–æ–≤", callback_data="keyword_list_menu")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîÑ –í–∫–ª/–í—ã–∫–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é", callback_data="toggle_filter")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data="menu_accounts")],
        [InlineKeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏", callback_data="menu_proxy")],
        [InlineKeyboardButton(text="üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", callback_data="menu_chats")],
        [InlineKeyboardButton(text="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º", callback_data="menu_parsing")]
    ])
    return keyboard

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    async with get_db() as db:
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot = None):
    async with get_db() as db:
        data = callback.data
        current_text = callback.message.text or ""
        current_markup = callback.message.reply_markup

        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data: {data} (–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏)")

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        if data == "back_to_main":
            new_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            new_markup = get_main_keyboard()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.clear()
            await callback.answer()
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if data == "menu_accounts":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:"
            new_markup = get_accounts_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        if data == "menu_proxy":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:"
            new_markup = get_proxy_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏
        if data == "menu_chats":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏:"
            new_markup = get_chat_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        if data == "menu_parsing":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º:"
            new_markup = get_parsing_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "keyword_list_menu":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:"
            new_markup = get_keyword_list_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –º–µ–Ω—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "back_to_keyword_menu":
            new_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º:"
            new_markup = get_parsing_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.clear()
            await callback.answer()
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "add_keyword_list":
            new_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:"
            new_markup = get_keyword_list_menu()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if callback.message.text != new_text or callback.message.reply_markup != new_markup:
                await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.set_state(AddKeywordListForm.name)
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "list_keyword_lists":
            async with get_db() as db:
                result = await db.execute(select(KeywordList))
                keyword_lists = result.scalars().all()
                if not keyword_lists:
                    new_text = "–°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_keyword_list_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    response = "–°–ø–∏—Å–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n"
                    for keyword_list in keyword_lists:
                        # –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º enabled —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å
                        result = await db.execute(select(KeywordList.enabled).where(KeywordList.id == keyword_list.id))
                        enabled = result.scalar() or False
                        result = await db.execute(select(KeywordFilter).where(KeywordFilter.keyword_list_id == keyword_list.id))
                        keywords = result.scalars().all()
                        keyword_str = ", ".join([kw.keyword for kw in keywords]) if keywords else "–ü—É—Å—Ç–æ"
                        response += f"üü¢ ID: {keyword_list.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {keyword_list.name}, –°—Ç–∞—Ç—É—Å: {'–í–∫–ª' if enabled else '–í—ã–∫–ª'}, –°–ª–æ–≤–∞: {keyword_str}\n"
                    new_text = response
                    new_markup = get_keyword_list_menu()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
                    if callback.message.text != new_text or callback.message.reply_markup != new_markup:
                        await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "edit_keyword_list":
            async with get_db() as db:
                result = await db.execute(select(KeywordList))
                keyword_lists = result.scalars().all()
                if not keyword_lists:
                    new_text = "–°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_keyword_list_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = await get_keyword_list_keyboard(keyword_lists, "edit_keyword_list")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "delete_keyword_list":
            async with get_db() as db:
                result = await db.execute(select(KeywordList))
                keyword_lists = result.scalars().all()
                if not keyword_lists:
                    new_text = "–°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_keyword_list_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = await get_keyword_list_keyboard(keyword_lists, "delete_keyword_list")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if data == "toggle_keyword_list":
            async with get_db() as db:
                result = await db.execute(select(KeywordList))
                keyword_lists = result.scalars().all()
                if not keyword_lists:
                    new_text = "–°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_keyword_list_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = await get_keyword_list_keyboard(keyword_lists, "toggle_keyword_list")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
        if data.startswith("edit_keyword_list:"):
            list_id = int(data.split(":")[1])
            async with get_db() as db:
                result = await db.execute(select(KeywordList).where(KeywordList.id == list_id))
                keyword_list = result.scalars().first()
                if not keyword_list:
                    new_text = "–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_keyword_list_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return
                await state.update_data({"list_id": list_id})
                new_text = f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {keyword_list.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):"
                new_markup = get_keyword_list_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await state.set_state(EditKeywordListForm.name)
                await callback.answer()
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        if data.startswith("delete_keyword_list:"):
            list_id = int(data.split(":")[1])
            async with get_db() as db:
                result = await db.execute(select(KeywordList).where(KeywordList.id == list_id))
                keyword_list = result.scalars().first()
                if keyword_list:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
                    await db.execute(text("DELETE FROM keyword_filters WHERE keyword_list_id = :list_id"), {"list_id": list_id})
                    await db.delete(keyword_list)
                    await db.commit()
                    new_text = f"–°–ø–∏—Å–æ–∫ —Å ID {list_id} —É–¥–∞–ª—ë–Ω."
                else:
                    new_text = "–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                new_markup = get_keyword_list_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        if data.startswith("toggle_keyword_list:"):
            list_id = int(data.split(":")[1])
            async with get_db() as db:
                result = await db.execute(select(KeywordList).where(KeywordList.id == list_id))
                keyword_list = result.scalars().first()
                if keyword_list:
                    # –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enabled –∏ name
                    enabled_result = await db.execute(select(KeywordList.enabled).where(KeywordList.id == list_id))
                    current_enabled = enabled_result.scalar() or False
                    name_result = await db.execute(select(KeywordList.name).where(KeywordList.id == list_id))
                    name = name_result.scalar() or "Unnamed"
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQL-–∑–∞–ø—Ä–æ—Å
                    await db.execute(
                        text("UPDATE keyword_lists SET enabled = :value WHERE id = :id"),
                        {"value": not current_enabled, "id": list_id}
                    )
                    await db.commit()
                    new_text = f"–°–ø–∏—Å–æ–∫ '{name}' {'–≤–∫–ª—é—á—ë–Ω' if not current_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}."
                else:
                    new_text = "–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                new_markup = get_keyword_list_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if data == "add_account":
            new_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):"
            new_markup = get_accounts_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.set_state(AddAccountForm.phone_number)
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if data == "list_accounts":
            async with get_db() as db:
                result = await db.execute(select(Account))
                accounts = result.scalars().all()
                if not accounts:
                    new_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    response = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
                    for account in accounts:
                        proxy_info = "–ë–µ–∑ –ø—Ä–æ–∫—Å–∏" if not account.proxy_id else f"–ü—Ä–∏–≤—è–∑–∞–Ω –ø—Ä–æ–∫—Å–∏ (ID: {account.proxy_id})"
                        response += f"ID: {account.id}, {proxy_info}\n"
                    new_text = response
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if data == "delete_account":
            async with get_db() as db:
                result = await db.execute(select(Account))
                accounts = result.scalars().all()
                if not accounts:
                    new_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = get_account_keyboard(accounts, "delete")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID
        if data.startswith("delete:"):
            async with get_db() as db:
                account_id = int(data.split(":")[1])
                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                if account:
                    session_file = f"sessions/{account.phone_number}"
                    if os.path.exists(session_file):
                        os.remove(session_file)
                        logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} —É–¥–∞–ª—ë–Ω")
                    await db.delete(account)
                    await db.commit()
                    new_text = f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É–¥–∞–ª—ë–Ω."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        if data == "check_account":
            async with get_db() as db:
                result = await db.execute(select(Account))
                accounts = result.scalars().all()
                if not accounts:
                    new_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = get_account_keyboard(accounts, "check")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        if data.startswith("check:"):
            async with get_db() as db:
                account_id = int(data.split(":")[1])
                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                if account:
                    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                    client = await create_client(account, db)
                    try:
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                        await asyncio.wait_for(client.connect(), timeout=20)
                        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                        is_authorized = await client.is_user_authorized()
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {is_authorized}")
                        if is_authorized:
                            new_text = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç (ID: {account_id}) –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."
                        else:
                            new_text = f"‚ùå –ê–∫–∫–∞—É–Ω—Ç (ID: {account_id}) –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."
                        new_markup = get_accounts_menu()
                        await callback.message.edit_text(new_text, reply_markup=new_markup)
                    except asyncio.TimeoutError:
                        logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                        new_text = f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (ID: {account_id}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
                        new_markup = get_accounts_menu()
                        await callback.message.edit_text(new_text, reply_markup=new_markup)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}: {e}")
                        new_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (ID: {account_id}): {str(e)}"
                        new_markup = get_accounts_menu()
                        await callback.message.edit_text(new_text, reply_markup=new_markup)
                    finally:
                        logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
                        await client.disconnect()
                else:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_accounts_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        if data == "add_proxy":
            new_text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–∞–π–ø–∏ –ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–æ–ª—å\n–ü—Ä–∏–º–µ—Ä: geo.iproyal.com 32325 oeUMpx50aOQ3DvpU l2DS1ucvbAabA974_country-ru"
            new_markup = get_proxy_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.set_state(AddProxyForm.proxy_data)
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
        if data == "list_proxies":
            async with get_db() as db:
                result = await db.execute(select(Proxy))
                proxies = result.scalars().all()
                if not proxies:
                    new_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    response = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:\n"
                    for proxy in proxies:
                        response += f"ID: {proxy.id}, –¢–∏–ø: {proxy.type}\n"
                    new_text = response
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        if data == "delete_proxy":
            async with get_db() as db:
                result = await db.execute(select(Proxy))
                proxies = result.scalars().all()
                if not proxies:
                    new_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = get_account_keyboard(proxies, "delete_proxy")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ ID
        if data.startswith("delete_proxy:"):
            async with get_db() as db:
                proxy_id = int(data.split(":")[1])
                result = await db.execute(select(Proxy).where(Proxy.id == proxy_id))
                proxy = result.scalars().first()
                if proxy:
                    await db.delete(proxy)
                    await db.commit()
                    new_text = f"–ü—Ä–æ–∫—Å–∏ —Å ID {proxy_id} —É–¥–∞–ª—ë–Ω."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    new_text = "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É ‚Äî –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
        if data == "bind_proxy":
            async with get_db() as db:
                result = await db.execute(select(Account))
                accounts = result.scalars().all()
                if not accounts:
                    new_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                    for account in accounts:
                        button = InlineKeyboardButton(
                            text=f"ID: {account.id}",
                            callback_data=f"bind_proxy_account:{account.id}"
                        )
                        keyboard.inline_keyboard.append([button])
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ–∫—Å–∏:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        if data.startswith("bind_proxy_account:"):
            async with get_db() as db:
                account_id = int(data.split(":")[1])
                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                if not account:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                result = await db.execute(select(Proxy))
                proxies = result.scalars().all()
                if not proxies:
                    new_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                for proxy in proxies:
                    button = InlineKeyboardButton(
                        text=f"ID: {proxy.id}, –•–æ—Å—Ç: {proxy.host}, –ü–æ—Ä—Ç: {proxy.port}",
                        callback_data=f"bind_proxy_to_account:{account_id}:{proxy.id}"
                    )
                    keyboard.inline_keyboard.append([button])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}:"
                await callback.message.edit_text(new_text, reply_markup=keyboard)
                await state.update_data({"account_id": account_id})
                await callback.answer()
                return

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        if data.startswith("bind_proxy_to_account:"):
            async with get_db() as db:
                parts = data.split(":")
                account_id = int(parts[1])
                proxy_id = int(parts[2])

                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                result = await db.execute(select(Proxy).where(Proxy.id == proxy_id))
                proxy = result.scalars().first()

                if not account or not proxy:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                    new_markup = get_proxy_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                # –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º proxy.id –¥–æ commit
                proxy_id_value = proxy.id
                account.proxy_id = proxy_id
                await db.commit()
                new_text = f"–ü—Ä–æ–∫—Å–∏ (ID: {proxy_id_value}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É ID {account_id}!"
                new_markup = get_proxy_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
        if data == "add_target_chat":
            new_text = "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª:"
            new_markup = get_chat_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.set_state(AddTargetChatForm.chat_id)
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤
        if data == "list_target_chats":
            async with get_db() as db:
                result = await db.execute(select(TargetChat))
                target_chats = result.scalars().all()
                if not target_chats:
                    new_text = "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_chat_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    response = "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤:\n"
                    for chat in target_chats:
                        response += f"ID: {chat.id}, –ß–∞—Ç: {chat.chat_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    new_text = response
                    new_markup = get_chat_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
        if data == "delete_target_chat":
            async with get_db() as db:
                result = await db.execute(select(TargetChat))
                target_chats = result.scalars().all()
                if not target_chats:
                    new_text = "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç."
                    new_markup = get_chat_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = get_target_chat_keyboard(target_chats, "delete_target")
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –ø–æ ID
        if data.startswith("delete_target:"):
            async with get_db() as db:
                chat_id = int(data.split(":")[1])
                result = await db.execute(select(TargetChat).where(TargetChat.id == chat_id))
                chat = result.scalars().first()
                if chat:
                    await db.delete(chat)
                    await db.commit()
                    new_text = f"–ß–∞—Ç —Å ID {chat_id} —É–¥–∞–ª—ë–Ω."
                    new_markup = get_chat_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    new_text = "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_chat_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        if data == "set_forward_chat":
            new_text = "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º):"
            new_markup = get_chat_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            await state.set_state(SetForwardChatForm.chat_id)
            await callback.answer()
            return

        # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if data == "toggle_filter":
            async with get_db() as db:
                result = await db.execute(select(Settings))
                settings = result.scalars().first()
                if settings:
                    # –Ø–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ filter_enabled
                    result = await db.execute(select(Settings.filter_enabled).where(Settings.id == settings.id))
                    current_filter_enabled = result.scalar() or False
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQL-–∑–∞–ø—Ä–æ—Å, –∏–∑–±–µ–≥–∞—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
                    await db.execute(
                        text("UPDATE settings SET filter_enabled = :value WHERE id = :id"),
                        {"value": not current_filter_enabled, "id": settings.id}
                    )
                    await db.commit()
                    new_text = f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º {'–≤–∫–ª—é—á–µ–Ω–∞' if not current_filter_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}."
                else:
                    new_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."
                new_markup = get_parsing_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if data == "stop_parsing":
            new_text = "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞..."
            new_markup = get_parsing_menu()
            await callback.message.edit_text(new_text, reply_markup=new_markup)
            async with get_db() as db:
                if active_parsers:
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:"
                    keyboard = get_active_parsers_keyboard()
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                else:
                    new_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞."
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
            await callback.answer()
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if data.startswith("stop_parsing:"):
            async with get_db() as db:
                parts = data.split(":")
                account_id = int(parts[1])
                target_chat_id = ":".join(parts[2:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π target_chat_id
                success = await stop_parsing(account_id, target_chat_id)
                if success:
                    new_text = f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –∏ —á–∞—Ç–∞ {target_chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                else:
                    new_text = f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id} –∏ —á–∞—Ç–∞ {target_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                new_markup = get_parsing_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer()
                return

        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if data == "start_parsing":
            async with get_db() as db:
                logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
                result = await db.execute(select(Account))
                accounts = result.scalars().all()
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")

                logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤...")
                result = await db.execute(select(TargetChat))
                target_chats = result.scalars().all()
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(target_chats)}")

                logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
                result = await db.execute(select(Settings))
                settings = result.scalars().first()
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings.forward_chat_id if settings else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")

                if not settings or not settings.forward_chat_id:
                    new_text = "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                elif not accounts:
                    new_text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                elif not target_chats:
                    new_text = "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                else:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                    for account in accounts:
                        button = InlineKeyboardButton(
                            text=f"ID: {account.id}",
                            callback_data=f"parse_account:{account.id}"
                        )
                        keyboard.inline_keyboard.append([button])
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:"
                    await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –í—ã–±–æ—Ä —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        if data.startswith("parse_account:"):
            async with get_db() as db:
                account_id = int(data.split(":")[1])
                logger.info(f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç ID: {account_id}")
                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                if not account:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                result = await db.execute(select(TargetChat))
                target_chats = result.scalars().all()
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(target_chats)}")
                if not target_chats:
                    new_text = "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                # –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data({"account_id": account_id, "selected_chats": []})
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                for chat in target_chats:
                    callback_data = f"toggle_chat:{account_id}:{chat.id}"
                    data_state = await state.get_data()
                    selected_chats = data_state.get("selected_chats", [])
                    button_text = f"{'‚úÖ' if chat.id in selected_chats else '‚¨ú'} {chat.title or chat.chat_id} (ID: {chat.id})"
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_chats:{account_id}")])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º (ID: {account_id}):"
                await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
        if data.startswith("toggle_chat:"):
            async with get_db() as db:
                parts = data.split(":")
                account_id = int(parts[1])
                chat_id = int(parts[2])
                logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ ID: {chat_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID: {account_id}")
                data_state = await state.get_data()
                selected_chats = data_state.get("selected_chats", [])
                if chat_id in selected_chats:
                    selected_chats.remove(chat_id)
                else:
                    selected_chats.append(chat_id)
                await state.update_data({"selected_chats": selected_chats})

                result = await db.execute(select(TargetChat))
                target_chats = result.scalars().all()
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                for chat in target_chats:
                    callback_data = f"toggle_chat:{account_id}:{chat.id}"
                    button_text = f"{'‚úÖ' if chat.id in selected_chats else '‚¨ú'} {chat.title or chat.chat_id} (ID: {chat.id})"
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_chats:{account_id}")])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–º (ID: {account_id}):"
                await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer()
                return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        if data.startswith("confirm_chats:"):
            async with get_db() as db:
                account_id = int(data.split(":")[1])
                logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID: {account_id}")
                result = await db.execute(select(Account).where(Account.id == account_id))
                account = result.scalars().first()
                data_state = await state.get_data()
                selected_chats = data_state.get("selected_chats", [])
                logger.info(f"–í—ã–±—Ä–∞–Ω–æ —á–∞—Ç–æ–≤: {len(selected_chats)}")
                result = await db.execute(select(Settings))
                settings = result.scalars().first()
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {settings.forward_chat_id if settings else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")

                if not account or not settings or not settings.forward_chat_id:
                    new_text = "–ê–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                    new_markup = get_parsing_menu()
                    await callback.message.edit_text(new_text, reply_markup=new_markup)
                    await callback.answer()
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text("‚è≥ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                await callback.answer("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—á–∞—Ç!")

                # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
                result = await db.execute(
                    select(KeywordFilter.keyword).join(KeywordList).where(
                        KeywordList.account_id == account_id,
                        KeywordList.enabled == True,
                        KeywordFilter.enabled == True
                    )
                )
                keywords = [row[0] for row in result.fetchall()]
                result = await db.execute(select(Settings.filter_enabled).where(Settings.id == settings.id))
                filter_enabled = result.scalar() or False

                success_chats = []
                failed_chats = []
                for chat_id in selected_chats:
                    result = await db.execute(select(TargetChat).where(TargetChat.id == chat_id))
                    target_chat = result.scalars().first()
                    if target_chat:
                        try:
                            logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat.chat_id} —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account.id}")
                            await start_real_time_parsing(
                                account,
                                target_chat.chat_id,
                                bot=bot,
                                forward_chat_id=settings.forward_chat_id,
                                keywords=keywords,
                                filter_enabled=filter_enabled
                            )
                            success_chats.append(target_chat.chat_id)
                            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {target_chat.chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        except Exception as e:
                            failed_chats.append(f"{target_chat.chat_id}: {str(e)}")
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {target_chat.chat_id}: {e}")
                    else:
                        failed_chats.append(f"–ß–∞—Ç ID {chat_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                new_text = "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
                if success_chats:
                    new_text += "–ó–∞–ø—É—â–µ–Ω—ã —á–∞—Ç—ã:\n" + "\n".join([f"‚úÖ {chat}" for chat in success_chats]) + "\n"
                if failed_chats:
                    new_text += "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç—ã:\n" + "\n".join([f"‚ùå {chat}" for chat in failed_chats]) + "\n"
                new_text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º' –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞."

                new_markup = get_parsing_menu()
                await callback.message.edit_text(new_text, reply_markup=new_markup)
                await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
                await state.clear()
                return

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
@router.message(AddTargetChatForm.chat_id)
async def process_target_chat_id(message: types.Message, state: FSMContext):
    async with get_db() as db:
        chat_id = message.text.strip()
        await state.update_data({"chat_id": chat_id})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):", reply_markup=get_chat_menu())
        await state.set_state(AddTargetChatForm.title)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
@router.message(AddTargetChatForm.title)
async def process_target_chat_title(message: types.Message, state: FSMContext):
    async with get_db() as db:
        title = message.text.strip() or None
        data = await state.get_data()
        chat_id = data.get("chat_id")

        result = await db.execute(select(TargetChat).where(TargetChat.chat_id == chat_id))
        existing_chat = result.scalars().first()
        if existing_chat:
            await message.answer("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_chat_menu())
            await state.clear()
            return

        target_chat = TargetChat(chat_id=chat_id, title=title)
        db.add(target_chat)
        await db.commit()
        await db.refresh(target_chat)

        await message.answer(f"–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ID: {target_chat.id}, –ß–∞—Ç: {chat_id}", reply_markup=get_chat_menu())
        await state.clear()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
@router.message(AddProxyForm.proxy_data)
async def process_proxy_data(message: types.Message, state: FSMContext):
    async with get_db() as db:
        try:
            parts = message.text.strip().split()
            if len(parts) != 4:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–π–ø–∏ –ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–æ–ª—å")

            host, port, user, password = parts
            port = int(port)
            if port < 0 or port > 65535:
                raise ValueError("–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 65535")

            proxy = Proxy(host=host, port=port, user=user, password=password, type="SOCKS5")
            db.add(proxy)
            await db.commit()
            await db.refresh(proxy)

            await message.answer(f"–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {proxy.id}", reply_markup=get_proxy_menu())
        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_proxy_menu())
            await state.set_state(AddProxyForm.proxy_data)
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_proxy_menu())
            await state.set_state(AddProxyForm.proxy_data)
        else:
            await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /add_account
@router.message(Command("add_account"))
async def add_account_start(message: types.Message, state: FSMContext):
    async with get_db() as db:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):", reply_markup=get_accounts_menu())
        await state.set_state(AddAccountForm.phone_number)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(AddAccountForm.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    async with get_db() as db:
        phone_number = message.text.strip()
        if not phone_number.startswith("+"):
            await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_accounts_menu())
            return

        result = await db.execute(select(Account).where(Account.phone_number == phone_number))
        existing_account = result.scalars().first()
        if existing_account:
            await message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_accounts_menu())
            await state.clear()
            return

        await state.update_data({"phone_number": phone_number})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ API ID:", reply_markup=get_accounts_menu())
        await state.set_state(AddAccountForm.api_id)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API ID
@router.message(AddAccountForm.api_id)
async def process_api_id(message: types.Message, state: FSMContext):
    async with get_db() as db:
        try:
            api_id = int(message.text.strip())
        except ValueError:
            await message.answer("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_accounts_menu())
            return

        await state.update_data({"api_id": api_id})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ API Hash:", reply_markup=get_accounts_menu())
        await state.set_state(AddAccountForm.api_hash)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API Hash
@router.message(AddAccountForm.api_hash)
async def process_api_hash(message: types.Message, state: FSMContext):
    async with get_db() as db:
        api_hash = message.text.strip()
        data = await state.get_data()
        phone_number = data.get("phone_number")
        api_id = data.get("api_id")

        account = Account(phone_number=phone_number, api_id=api_id, api_hash=api_hash)
        db.add(account)
        await db.commit()
        await db.refresh(account)

        client = await create_client(account, db)
        result = await authorize_client(client, phone_number, db)

        if result["status"] == "code_required":
            await state.update_data({"client": client, "phone_code_hash": result["phone_code_hash"]})
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Telegram:", reply_markup=get_accounts_menu())
            await state.set_state(AddAccountForm.code)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_accounts_menu())
            await state.clear()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(AddAccountForm.code)
async def process_code(message: types.Message, state: FSMContext):
    async with get_db() as db:
        code = message.text.strip()
        data = await state.get_data()
        client = data.get("client")
        phone_number = data.get("phone_number")
        phone_code_hash = data.get("phone_code_hash")

        result = await complete_authorization(client, phone_number, code, phone_code_hash)
        logger.info(f"Result from complete_authorization: {result}")
        if result["status"] == "authorized":
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", reply_markup=get_accounts_menu())
            await state.clear()
        elif result["status"] == "password_required":
            await state.update_data({"client": client, "phone_code_hash": phone_code_hash})
            await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=get_accounts_menu())
            await state.set_state(AddAccountForm.password)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_accounts_menu())
            await state.clear()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 2FA
@router.message(AddAccountForm.password)
async def process_password(message: types.Message, state: FSMContext):
    async with get_db() as db:
        password = message.text.strip()
        data = await state.get_data()
        client = data.get("client")
        phone_number = data.get("phone_number")
        phone_code_hash = data.get("phone_code_hash")

        result = await complete_authorization(client, phone_number, code=None, phone_code_hash=phone_code_hash, password=password)
        if result["status"] == "authorized":
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!", reply_markup=get_accounts_menu())
            await state.clear()
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:", reply_markup=get_accounts_menu())
            await state.set_state(AddAccountForm.password)

# –ö–æ–º–∞–Ω–¥–∞ /list_accounts
@router.message(Command("list_accounts"))
async def list_accounts(message: types.Message):
    async with get_db() as db:
        result = await db.execute(select(Account))
        accounts = result.scalars().all()
        if not accounts:
            await message.answer("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=get_accounts_menu())
            return

        response = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        for account in accounts:
            proxy_info = "–ë–µ–∑ –ø—Ä–æ–∫—Å–∏" if not account.proxy_id else f"–ü—Ä–∏–≤—è–∑–∞–Ω –ø—Ä–æ–∫—Å–∏ (ID: {account.proxy_id})"
            response += f"ID: {account.id}, {proxy_info}\n"
        await message.answer(response, reply_markup=get_accounts_menu())